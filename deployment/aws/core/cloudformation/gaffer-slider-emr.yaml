AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys a Gaffer instance on AWS EMR using Apache Slider"

Parameters:

  GafferVersion:
    Type: String
    Default: master
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer to deploy - can be a version number (e.g. 0.7.8) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  GafferToolsVersion:
    Type: String
    Default: master
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer Tools to use to deploy Gaffer on EMR - can be a version number (e.g. 0.7.8) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  AccumuloVersion:
    Type: String
    Default: 1.9.3
    MinLength: 1
    AllowedPattern: "\\S+"

  TabletServersPerYarnNode:
    Type: Number
    Default: 1
    MinValue: 1
    Description: The number of Accumulo Tablet Servers that should be deployed onto each YARN Node

  ClusterUsage:
    Type: Number
    Default: 85
    MinValue: 1
    MaxValue: 100
    Description: The proportion of the available cluster resources that should be assigned to Accumulo, specified as a percentage. If you plan to deploy other workloads (e.g. MR, Spark) on the EMR cluster then you should alter this parameter so that there will be resources available to them.
    ConstraintDescription: Must be between 1% and 100%

  EmrRelease:
    Type: String
    Default: emr-5.11.0
    AllowedPattern: "emr-\\d+\\.\\d+\\.\\d+"
    ConstraintDescription: Please select a valid EMR release

  EmrInstanceType:
    Type: String
    Default: m3.xlarge
    MinLength: 1
    Description: Specify the type of instances to deploy in the EMR cluster

  EmrCoreInstanceCount:
    Type: Number
    Default: 3
    MinValue: 0
    Description: The number of (core) instances to deploy as part of the EMR cluster

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy the EMR cluster into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to deploy the EMR cluster into. Make sure the subnet resides in the VPC you have selected above!

  ExtraEmrSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Additional security groups that EMR instances should be a member of

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair that you would like to be able to use to SSH into any instances
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  ManageSecurityGroups:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    Description: Should this stack create (and delete) security groups to be used by the EMR master/core/task/service nodes? If false, it will use the default groups created by AWS e.g. EMR_DefaultRole. If you are deploying into a public subnet (i.e. a subnet with an InternetGateway) then this needs to be false!
    ConstraintDescription: Please select either 'true' or 'false'

  GafferInstanceName:
    Type: String
    Default: gaffer
    MinLength: 1
    AllowedPattern: "[A-Za-z0-9-_]+"
    ConstraintDescription: Please choose a name which is made up of [A-Za-z0-9]

  MavenRepoTarball:
    Type: String
    Default: ""
    Description: "(Optional) The path to a tarball, stored in S3, that should be used to bootstrap the local Maven cache. Should be specified as: <bucketName>/<filename>.tar.gz"
    AllowedPattern: "|(\\S+\\.tar\\.gz)"
    ConstraintDescription: "Please specify this as <bucketName>/<filename>.tar.gz"

  TimeoutUploadFile:
    Type: Number
    Default: 180
    Description: "Timeout value for the upload file(s) function"
    MinValue: 1

  TimeoutDeployGaffer:
    Type: Number
    Default: 3600
    Description: "Timeout value for deploying Gafffer"
    MinValue: 1

  TimeoutCleanupSecurity:
    Type: Number
    Default: 180
    Description: "Timeout value for the security clean-up"
    MinValue: 1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Versions
        Parameters:
          - GafferVersion
          - GafferToolsVersion
          - AccumuloVersion
          - EmrRelease
      - Label:
          default: Gaffer Config
        Parameters:
          - GafferInstanceName
      - Label:
          default: Accumulo Config
        Parameters:
          - TabletServersPerYarnNode
          - ClusterUsage
      - Label:
          default: EMR Config
        Parameters:
          - EmrInstanceType
          - EmrCoreInstanceCount
          - VpcId
          - SubnetId
          - KeyName
          - ExtraEmrSecurityGroups
          - ManageSecurityGroups
          - MavenRepoTarball
      - Label:
          default: Timeouts
        Parameters:
          - TimeoutUploadFile
          - TimeoutCleanupSecurity
          - TimeoutDeployGaffer

Conditions:

  SecurityGroupsManagedByStack: !Equals [!Ref ManageSecurityGroups, "true"]
  BootstrapLocalMavenRepo: !Not [!Equals [!Ref MavenRepoTarball, ""]]

Resources:

  ##############
  ## EMR Cluster
  ##############

  EmrCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: !Join ["-", [Ref: "AWS::StackName", "emr"]]
      ReleaseLabel: !Ref EmrRelease
      Applications:
        - Name: Hadoop
        - Name: ZooKeeper
        - Name: Spark
        - Name: Ganglia
      BootstrapActions:
        - Name: SetSwappiness
          ScriptBootstrapAction:
            Path: !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.SetSwappinessBootstrap]]
      LogUri: !Join ["", ["s3://", !Ref S3Bucket, "/emr-logs/"]]
      Instances:
        MasterInstanceGroup:
          Name: Master
          InstanceCount: 1
          InstanceType: !Ref EmrInstanceType
        CoreInstanceGroup:
          Name: Core
          InstanceCount: !Ref EmrCoreInstanceCount
          InstanceType: !Ref EmrInstanceType
        EmrManagedMasterSecurityGroup: !If [SecurityGroupsManagedByStack, !Ref EmrMasterManagedSecurityGroup, !Ref "AWS::NoValue"]
        EmrManagedSlaveSecurityGroup: !If [SecurityGroupsManagedByStack, !Ref EmrSlaveManagedSecurityGroup, !Ref "AWS::NoValue"]
        ServiceAccessSecurityGroup: !If [SecurityGroupsManagedByStack, !Ref EmrServiceSecurityGroup, !Ref "AWS::NoValue"]
        AdditionalMasterSecurityGroups: !Split [",", !Join [",", [!Join [",", !Ref ExtraEmrSecurityGroups], !Ref EmrMasterSecurityGroup]]]
        AdditionalSlaveSecurityGroups: !Split [",", !Join [",", [!Join [",", !Ref ExtraEmrSecurityGroups], !Ref EmrSlaveSecurityGroup]]]
        Ec2KeyName: !Ref KeyName
        Ec2SubnetId: !Ref SubnetId
      JobFlowRole: !Ref EmrInstanceProfile
      ServiceRole: EMR_DefaultRole
      VisibleToAllUsers: true
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr"]]

  ######################
  ## EMR Security Groups
  ######################

  EmrMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for EMR Master nodes
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr-master"]]

  EmrSlaveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for EMR Slave nodes
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr-slave"]]

  EmrMasterManagedSecurityGroup:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Managed security group for EMR Master nodes
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr-managed-master"]]

  EmrSlaveManagedSecurityGroup:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Managed security group for EMR Slave nodes
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr-managed-slave"]]

  EmrServiceSecurityGroup:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Managed security group for EMR services
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "emr-managed-service"]]

  # AWS manages the ingress and egress rules for the above 3 security groups. However, although it adds the rules, it
  # does not seem to delete them. As the rules that are added to the groups refer to one another, the groups cannot be
  # deleted until the rules have been deleted. This causes deletions of this stack to fail.
  # This custom resource provides a (hopefully, temporary) fix, by forcing the removal of all the rules for the above
  # security groups, enabling CloudFormation to delete them.

  CleanupEmrSecurityGroupsCustomResource:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    DependsOn:
      - EmrMasterManagedSecurityGroup
      - EmrSlaveManagedSecurityGroup
      - EmrServiceSecurityGroup
    Properties:
      ServiceToken: !GetAtt CleanupEmrSecurityGroupsLambda.Arn
      SecurityGroups:
        - !Ref EmrMasterManagedSecurityGroup
        - !Ref EmrSlaveManagedSecurityGroup
        - !Ref EmrServiceSecurityGroup

  CleanupEmrSecurityGroupsLambda:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::Lambda::Function
    Properties:
      Description: Deletes all ingress and egress rules from specified security groups
      Role: !GetAtt CleanupEmrSecurityGroupsRole.Arn
      Runtime: nodejs6.10
      Handler: index.handler
      MemorySize: 128
      Timeout: !Ref TimeoutCleanupSecurity
      Code:
        ZipFile: |
          const aws = require('aws-sdk')
          const ec2 = new aws.EC2()

          const response = require('cfn-response')

          function cleanSecurityGroupRule (rule) {
            if (rule.UserIdGroupPairs.length == 0)
              delete rule.UserIdGroupPairs
            if (rule.IpRanges.length == 0)
              delete rule.IpRanges
            if (rule.Ipv6Ranges.length == 0)
              delete rule.Ipv6Ranges
            if (rule.PrefixListIds.length == 0)
              delete rule.PrefixListIds
          }

          exports.handler = function(evt, context){

            // Don't need to do anything for Create or Update requests
            if (evt.RequestType == 'Create' || evt.RequestType == 'Update') {
              response.send(evt, context, response.SUCCESS, {})
            } else if (evt.RequestType != 'Delete') {
              console.error('Unknown event.RequestType = ' + evt.RequestType)
              response.send(evt, context, response.FAILED, {})
            }

            const secGroups = evt.ResourceProperties.SecurityGroups
            console.log('Security Groups: ' + secGroups)

            // Query AWS for all the ingress and egress rules for all the security groups
            ec2.describeSecurityGroups({ GroupIds: secGroups }, function(err, data){
              if (err) {
                console.error(err)
                return response.send(evt, context, response.FAILED, {})
              }

              let awsRequests = []

              const groups = data.SecurityGroups
              for (let i = 0; i < groups.length; i++) {
                const group = groups[i]
                console.log(group)

                // Delete all ingress rules from security group
                if (group.IpPermissions.length > 0) {
                  for (let j = 0; j < group.IpPermissions.length; j++) {
                    let rule = group.IpPermissions[j]
                    cleanSecurityGroupRule(rule)
                  }

                  awsRequests.push(new Promise(function(resolve, reject){
                    ec2.revokeSecurityGroupIngress({
                      GroupId: group.GroupId,
                      IpPermissions: group.IpPermissions
                    }, function(err, data){
                      if (err) {
                        console.error(err)
                        return resolve(false)
                      }

                      console.log(data)
                      return resolve(true)
                    })
                  }))
                }

                // Delete all egress rules from security group
                if (group.IpPermissionsEgress.length > 0) {
                  for (let j = 0; j < group.IpPermissionsEgress.length; j++) {
                    let rule = group.IpPermissionsEgress[j]
                    cleanSecurityGroupRule(rule)
                  }

                  awsRequests.push(new Promise(function(resolve, reject){
                    ec2.revokeSecurityGroupEgress({
                      GroupId: group.GroupId,
                      IpPermissions: group.IpPermissionsEgress
                    }, function(err, data){
                      if (err) {
                        console.error(err)
                        return resolve(false)
                      }

                      console.log(data)
                      return resolve(true)
                    })
                  }))
                }
              }

              // Using promises so that we can issue all the AWS API requests in parallel
              // Here we wait for all of them to return before deciding if to pass or fail this custom resource
              Promise.all(awsRequests).then(function(responses){
                // If we failed to delete any security group rules then we are going to fail the custom resource
                for (let i = 0; i < responses.length; i++) {
                  if (!responses[i]) {
                    return response.send(evt, context, response.FAILED, {})
                  }
                }

                response.send(evt, context, response.SUCCESS, {})
              })
            })
          }

  CleanupEmrSecurityGroupsRole:
    Condition: SecurityGroupsManagedByStack
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "revoke-secgroups"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress

  #############################
  ## EMR IAM Roles and Policies
  #############################

  EmrInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [Ref: "AWS::StackName", "emr-profile"]]
      Roles:
        - Ref: EmrJobFlowRole

  EmrJobFlowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "emr-s3-access"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

  EmrS3AccessMavenTarballPolicy:
    Condition: BootstrapLocalMavenRepo
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref EmrJobFlowRole
      PolicyName: !Join ["-", [Ref: "AWS::StackName", "emr-s3-access2"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", !Ref MavenRepoTarball]]
            Action:
              - s3:GetObject

  ###############
  ## Step scripts
  ###############

  AccumuloInstance:
    Type: AWS::EMR::Step
    Properties:
      JobFlowId: !Ref EmrCluster
      Name: deploy-gaffer
      HadoopJarStep:
        Jar: s3://elasticmapreduce/libs/script-runner/script-runner.jar
        Args:
          - !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.DeployGafferScript]]
          - "-g"
          - !Ref GafferVersion
          - "-t"
          - !Ref GafferToolsVersion
          - "-a"
          - !Ref AccumuloVersion
          - "-n"
          - !Ref TabletServersPerYarnNode
          - "-u"
          - !Ref ClusterUsage
          - "-w"
          - !Ref WaitForGafferHandler
          - "--mvn-repo"
          - !If [BootstrapLocalMavenRepo, !Ref MavenRepoTarball, "none"]
          # This is here to ensure that the IAM Policy that gives this script permission to download the Maven tarball
          # from S3 has been applied. Currently CloudFormation doesn't allow DependsOn to be combined with Conditions.
          - "--ignore"
          - !If [BootstrapLocalMavenRepo, !Ref EmrS3AccessMavenTarballPolicy, "none"]
          - !Ref GafferInstanceName
      ActionOnFailure: CANCEL_AND_WAIT

  WaitForGafferCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitForGafferHandler
      Timeout: !Ref TimeoutDeployGaffer

  WaitForGafferHandler:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn: EmrCluster

  ##############################
  ## Upload dependencies into S3
  ##############################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  FileUploadCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt FileUploadLambda.Arn
      BucketName: !Ref S3Bucket

  FileUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uploads files required to deploy Gaffer on EMR to an S3 bucket
      Role: !GetAtt FileUploadRole.Arn
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: !Ref TimeoutUploadFile
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python

          import boto3
          import base64
          import urllib2
          import cfnresponse

          s3 = boto3.client('s3')

          files=[]

          files.append({
            'Output': 'SetSwappinessBootstrap',
            'Key': 'bootstrap/set-swappiness.sh',
            'Body': '#!/bin/bash -e' + "\n" + 'sudo sysctl -w vm.swappiness=1' + "\n" + 'echo "vm.swappiness=1" | sudo tee -a /etc/sysctl.conf'
          })

          files.append({
            'Output': 'DeployGafferScript',
            'Key': 'step/deploy-gaffer-instance.sh',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/core/emr-step-scripts/deploy-gaffer-instance.sh',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/core/emr-step-scripts/deploy-gaffer-instance.sh'
            ]
          })

          def upload_files(bucket):
            outputs = {}

            for file in files:
              body = None
              if 'Body' in file:
                body = file['Body']
              elif 'Body64' in file:
                body = base64.b64decode(file['Body64'])
              elif 'Url' in file:
                body = urllib2.urlopen(file['Url']).read()
              elif 'Urls' in file:
                lastError = None
                for url in file['Urls']:
                  try:
                    body = urllib2.urlopen(url).read()
                    break
                  except Exception as e:
                    print('Request for ' + url + ' error: ' + str(e))
                    lastError = e
                if body is None and lastError is not None:
                  raise lastError

              if body is not None:
                s3.put_object(
                  Bucket=bucket,
                  Key=file['Key'],
                  Body=body
                )

                if 'Output' in file:
                  outputs[file['Output']] = file['Key']

            return outputs

          def cleanup_files(bucket):
            # Delete EMR logs
            continueDeletion = True
            while continueDeletion:
              continueDeletion = False

              logListing = s3.list_objects_v2(
                Bucket=bucket,
                Prefix='emr-logs/'
              )

              if 'IsTruncated' in logListing:
                continueDeletion = logListing['IsTruncated']

              logFiles = []
              if 'Contents' in logListing:
                for log in logListing['Contents']:
                  logFiles.append({ 'Key': log['Key'] })

              if len(logFiles) > 0:
                s3.delete_objects(
                  Bucket=bucket,
                  Delete={
                    'Objects': logFiles
                  }
                )

            # Delete uploaded files
            for file in files:
              s3.delete_object(
                Bucket=bucket,
                Key=file['Key']
              )

          def lambda_handler(evt, cntx):
            try:
              print(evt)

              bucket = evt['ResourceProperties']['BucketName']
              print('S3 Bucket: ' + bucket)

              requestType = evt['RequestType']
              if requestType == 'Create' or requestType == 'Update':
                outputs = upload_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, outputs)
              elif requestType == 'Delete':
                cleanup_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, {})
              else:
                raise Exception('Unrecognised RequestType: ' + requestType)

            except Exception as e:
              cfnresponse.send(evt, cntx, cfnresponse.FAILED, { 'Error': str(e) })
              raise

  FileUploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "file-upload"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

Outputs:
  EmrClusterId:
    Value: !Ref EmrCluster
  EmrMasterPublicDNS:
    Value: !GetAtt EmrCluster.MasterPublicDNS
  EmrMasterSecurityGroup:
    Value: !Ref EmrMasterSecurityGroup
  EmrSlaveSecurityGroup:
    Value: !Ref EmrSlaveSecurityGroup
  EmrIamRoleName:
    Value: !Ref EmrJobFlowRole
  GafferInstanceName:
    Value: !Ref GafferInstanceName
  AccumuloInstanceName:
    Value: !Join ["-", ["hadoop", Ref: GafferInstanceName]]
