AWSTemplateFormatVersion: "2010-09-09"
Description: "Gaffer Performance Testing"

Parameters:

  GafferVersion:
    Type: String
    Default: develop
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer to deploy and test - can be a version number (e.g. 0.7.8) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  GafferToolsVersion:
    Type: String
    Default: develop
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer Tools to use to deploy Gaffer on EMR and run the tests - can be a version number (e.g. 0.7.8) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  AccumuloVersion:
    Type: String
    Default: 1.9.3
    MinLength: 1
    AllowedPattern: "\\S+"

  TabletServersPerYarnNode:
    Type: Number
    Default: 1
    MinValue: 1
    Description: The number of Accumulo Tablet Servers that should be deployed onto each YARN Node

  ClusterUsage:
    Type: Number
    Default: 85
    MinValue: 1
    MaxValue: 100
    Description: The proportion of the available cluster resources that should be assigned to Accumulo, specified as a percentage. If you plan to deploy other workloads (e.g. MR, Spark) on the EMR cluster then you should alter this parameter so that there will be resources available to them.
    ConstraintDescription: Must be between 1% and 100%

  EmrRelease:
    Type: String
    Default: emr-5.11.0
    AllowedPattern: "emr-\\d+\\.\\d+\\.\\d+"
    ConstraintDescription: Please select a valid EMR release

  EmrInstanceType:
    Type: String
    Default: m3.xlarge
    MinLength: 1
    Description: Specify the type of instances to deploy in the EMR cluster

  EmrCoreInstanceCount:
    Type: Number
    Default: 3
    MinValue: 0
    Description: The number of (core) instances to deploy as part of the EMR cluster

  DataGeneratorCount:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 1000
    Description: The number of EC2 instances to deploy the Gaffer data generation app onto

  DataGeneratorInstanceType:
    Type: String
    Default: t2.small
    MinLength: 1
    Description: Specify the type of instances to be used to deploy the Gaffer data generation app onto

  QueryGeneratorCount:
    Type: Number
    Default: 0
    MinValue: 0
    MaxValue: 1000
    Description: The number of EC2 instances to deploy the Gaffer query generator app onto

  QueryGeneratorInstanceType:
    Type: String
    Default: t2.small
    MinLength: 1
    Description: Specify the type of instance to be used to deploy the Gaffer query generator app onto

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy all the EC2 instances into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to deploy all the EC2 instances into. Make sure the subnet resides in the VPC you have selected above!

  ExtraSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Additional security groups that all EC2 instances should be a member of

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair that you would like to be able to use to SSH into any instances
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  RmatMaxNodeId:
    Type: Number
    Default: 1000000000
    MinValue: 1000

  IngestBatchSize:
    Type: Number
    Default: 10000000
    MinValue: 1000
    Description: The generators output a rate metric at the end of each batch. Altering this value will change how often it is output.

  QueryBatchSize:
    Type: Number
    Default: 100000
    MinValue: 1000
    Description: The generators output a rate metric at the end of each batch. Altering this value will change how often it is output.

  IngestElementCount:
    Type: Number
    Default: 1000000000
    MinValue: 1000
    Description: The number of elements that each Data Generator should ingest into the Gaffer graph

  QuerySeedCount:
    Type: Number
    Default: 10000000
    MinValue: 1000
    Description: The number of seeds each Query Generator should query for

  SplitEstimationElementCount:
    Type: Number
    Default: 500000
    MinValue: 10000
    Description: The number of elements that should be generated to help set the initial Accumulo split points to help ensure that data is evenly distributed across all the tablets. Generating more elements should result in more ideal split points, but will take longer.

  SplitsPerTabletServer:
    Type: Number
    Default: 1
    MinValue: 1
    Description: Affects the initial number of tablets for the Accumulo table used to store the Gaffer graph.

  IngestIncludeEntities:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Should both entity and edge elements be generated? If false, only edge elements are generated.

  IngestMaxBufferBytes:
    Type: Number
    Default: 100000000
    MinValue: 0
    Description: The maximum amount of data that the Data Generators should hold in memory before writing to the tablet servers

  IngestMaxTimeout:
    Type: Number
    Default: 20000
    MinValue: 0
    Description: The maximum amount of time (in milliseconds) that the Data Generators should hold the data in memory before flushing it to the tablet servers

  IngestThreadCount:
    Type: Number
    Default: 20
    MinValue: 1
    Description: The maximum number of threads that the Data Generators should use to write data to the tablet servers

  MavenRepoTarball:
    Type: String
    Default: ""
    Description: "(Optional) The path to a tarball, stored in S3, that should be used to bootstrap local Maven caches. Should be specified as: <bucketName>/<filename>.tar.gz"
    AllowedPattern: "|(\\S+\\.tar\\.gz)"
    ConstraintDescription: "Please specify this as <bucketName>/<filename>.tar.gz"

  TimeoutUpload:
    Type: Number
    Default: 180
    Description: "Timeout value for the upload file(s) function"
    MinValue: 1

  TimeoutCreateUsers:
    Type: Number
    Default: 600
    Description: "Timeout value for creating the Gaffer user(s)"
    MinValue: 1

  TimeoutGafferDeploy:
    Type: Number
    Default: 3600
    Description: "Timeout value for deploying Gafffer"
    MinValue: 1

  TimeoutSecurityCleanup:
    Type: Number
    Default: 180
    Description: "Timeout value for the security clean-up"
    MinValue: 1

  TimeoutAccumuloSplitPoints:
    Type: Number
    Default: 900
    Description: "Timeout value for creating the Accumulo table split points"
    MinValue: 1

  TimeoutMetricsInstall:
    Type: Number
    Default: 900
    Description: "Timeout value for installing the metrics"
    MinValue: 1

  TimeoutMetricsUpdate:
    Type: Number
    Default: 180
    Description: "Timeout value for updating the metrics"
    MinValue: 1


Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Versions
        Parameters:
          - GafferVersion
          - GafferToolsVersion
          - AccumuloVersion
          - EmrRelease
      - Label:
          default: EMR Cluster Config
        Parameters:
          - EmrCoreInstanceCount
          - EmrInstanceType
          - TabletServersPerYarnNode
          - MavenRepoTarball
          - ClusterUsage
      - Label:
          default: Data Generation Config
        Parameters:
          - DataGeneratorCount
          - DataGeneratorInstanceType
          - SplitEstimationElementCount
          - SplitsPerTabletServer
          - IngestElementCount
          - IngestIncludeEntities
          - IngestBatchSize
          - IngestMaxBufferBytes
          - IngestMaxTimeout
          - IngestThreadCount
      - Label:
          default: Query Generation Config
        Parameters:
          - QueryGeneratorCount
          - QueryGeneratorInstanceType
          - QuerySeedCount
          - QueryBatchSize
      - Label:
          default: Common Generation Config
        Parameters:
          - RmatMaxNodeId
      - Label:
          default: Placement and Security
        Parameters:
          - VpcId
          - SubnetId
          - KeyName
          - ExtraSecurityGroups
      - Label:
          default: Timeouts
        Parameters:
          - TimeoutUpload
          - TimeoutSecurityCleanup
          - TimeoutGafferDeploy
          - TimeoutCreateUsers
          - TimeoutAccumuloSplitPoints
          - TimeoutMetricsInstall
          - TimeoutMetricsUpdate

Mappings:

  # Amazon Linux AMI: https://aws.amazon.com/amazon-linux-ami/
  InstanceAmi:

    # N. Virginia
    us-east-1:
      64ebs: ami-a4c7edb2

    # Ohio
    us-east-2:
      64ebs: ami-8a7859ef

    # N. California
    us-west-1:
      64ebs: ami-327f5352

    # Oregon
    us-west-2:
      64ebs: ami-6df1e514

    # Canada
    ca-central-1:
      64ebs: ami-a7aa15c3

    # Frankfurt
    eu-central-1:
      64ebs: ami-82be18ed

    # Ireland
    eu-west-1:
      64ebs: ami-d7b9a2b1

    # London
    eu-west-2:
      64ebs: ami-ed100689

    # Mumbai
    ap-south-1:
      64ebs: ami-47205e28

    # Tokyo
    ap-northeast-1:
      64ebs: ami-3bd3c45c

    # Seoul
    ap-northeast-2:
      64ebs: ami-e21cc38c

    # Singapore
    ap-southeast-1:
      64ebs: ami-77af2014

    # Sydney
    ap-southeast-2:
      64ebs: ami-10918173

    # Sao Paulo
    sa-east-1:
      64ebs: ami-87dab1eb

Conditions:

  BootstrapLocalMavenRepo: !Not [!Equals [!Ref MavenRepoTarball, ""]]

Resources:

  GafferWithUser:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/", Ref: S3Bucket, "/", !GetAtt FileUploadCustomResource.DeployGafferWithUserStack]]
      Parameters:
        GafferVersion: !Ref GafferVersion
        GafferToolsVersion: !Ref GafferToolsVersion
        AccumuloVersion: !Ref AccumuloVersion
        EmrRelease: !Ref EmrRelease
        EmrInstanceType: !Ref EmrInstanceType
        EmrCoreInstanceCount: !Ref EmrCoreInstanceCount
        VpcId: !Ref VpcId
        SubnetId: !Ref SubnetId
        ExtraEmrSecurityGroups: !Join [",", Ref: ExtraSecurityGroups]
        KeyName: !Ref KeyName
        TabletServersPerYarnNode: !Ref TabletServersPerYarnNode
        MavenRepoTarball: !Ref MavenRepoTarball
        ClusterUsage: !Ref ClusterUsage
        TimeoutUpload: !Ref TimeoutUpload
        TimeoutCreateUsers: !Ref TimeoutCreateUsers
        TimeoutSecurityCleanup: !Ref TimeoutSecurityCleanup
        TimeoutGafferDeploy: !Ref TimeoutGafferDeploy

  # Security group that all generators (data and query) will be a member of
  GeneratorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: All data and query generator instances
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "generators"]]

  # Additional ingress rules to be applied to all Gaffer instances that will accept traffic from all generators

  GeneratorAccessToEmrMasterIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Sub ${GafferWithUser.Outputs.EmrMasterSecurityGroup}
      SourceSecurityGroupId: !Ref GeneratorSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535

  GeneratorAccessToEmrSlaveIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Sub ${GafferWithUser.Outputs.EmrSlaveSecurityGroup}
      SourceSecurityGroupId: !Ref GeneratorSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535

  #####################################
  ## Install Accumulo metric collection
  #####################################

  WaitForMetricCollectionInstall:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitForMetricCollectionHandler
      Timeout: !Ref TimeoutMetricsInstall

  WaitForMetricCollectionHandler:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn: GafferWithUser

  InstallAccumuloMetricCollection:
    Type: AWS::EMR::Step
    Properties:
      JobFlowId: !Sub ${GafferWithUser.Outputs.EmrClusterId}
      Name: install-accumulo-metric-collection
      HadoopJarStep:
        Jar: s3://elasticmapreduce/libs/script-runner/script-runner.jar
        Args:
          - !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.InstallAccumuloMetricsCollectionScript]]
          - !Ref GafferToolsVersion
          - "-i"
          - !Sub ${GafferWithUser.Outputs.AccumuloInstanceName}
          - "-w"
          - !Ref WaitForMetricCollectionHandler
      ActionOnFailure: CANCEL_AND_WAIT

  #########################################
  ## Generate and set Accumulo split points
  #########################################

  WaitForSplitPointsToBeSet:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitForSplitPointsToBeSetHandler
      Timeout: !Ref TimeoutAccumuloSplitPoints

  WaitForSplitPointsToBeSetHandler:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn: WaitForMetricCollectionInstall

  SetAccumuloTableSplitPoints:
    Type: AWS::EMR::Step
    Properties:
      JobFlowId: !Sub ${GafferWithUser.Outputs.EmrClusterId}
      Name: set-accumulo-table-split-points
      HadoopJarStep:
        Jar: s3://elasticmapreduce/libs/script-runner/script-runner.jar
        Args:
          - !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.SetGafferAccumuloSplitPointsScript]]
          - !Ref GafferToolsVersion
          - "-g"
          - gaffer_performance_test
          - "-i"
          - !Sub ${GafferWithUser.Outputs.AccumuloInstanceName}
          - "-m"
          - !Ref RmatMaxNodeId
          - "-n"
          - !Ref SplitEstimationElementCount
          - "-p"
          - !Sub ${GafferWithUser.Outputs.PasswordParameter}
          - "-s"
          - !Ref SplitsPerTabletServer
          - "-u"
          - !Sub ${GafferWithUser.Outputs.UserName}
          - "-z"
          - !Sub ${GafferWithUser.Outputs.EmrMasterPublicDNS}
          - "-w"
          - !Ref WaitForSplitPointsToBeSetHandler
      ActionOnFailure: CANCEL_AND_WAIT

  ##################
  ## Data Generators
  ##################

  DataGeneratorScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WaitForSplitPointsToBeSet
      - GeneratorAccessToEmrMasterIngressRule
      - GeneratorAccessToEmrSlaveIngressRule
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId
      DesiredCapacity: !Ref DataGeneratorCount
      MinSize: 0
      MaxSize: 1000
      Cooldown: 60
      MetricsCollection:
        - Granularity: 1Minute
      LaunchConfigurationName: !Ref DataGeneratorLaunchConfiguration
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "datagen"]]
          PropagateAtLaunch: true

  DataGeneratorLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref DataGeneratorInstanceType
      ImageId: !FindInMap [InstanceAmi, Ref: "AWS::Region", 64ebs]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref GeneratorInstanceProfile
      SecurityGroups:
        !Split
          - ","
          - !Join
              - ","
              - - !Join [",", !Ref ExtraSecurityGroups]
                - !Ref GeneratorSecurityGroup
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -xe

              # Common Config
              export GENERATOR_TYPE="data"
              export GAFFER_TOOLS_VERSION="${GafferToolsVersion}"
              export GAFFER_GRAPH_ID="gaffer_performance_test"

              export EMR_JOB_FLOW_ID="${GafferWithUser.Outputs.EmrClusterId}"
              export ACCUMULO_INSTANCE="${GafferWithUser.Outputs.AccumuloInstanceName}"
              export ACCUMULO_USERNAME="${GafferWithUser.Outputs.UserName}"
              export PASSWORD_PARAM="${GafferWithUser.Outputs.PasswordParameter}"
              export ZOOKEEPERS="${GafferWithUser.Outputs.EmrMasterPublicDNS}"
              export AWS_REGION="${AWS::Region}"

              export RMAT_MAX_NODE_ID="${RmatMaxNodeId}"

              export MVN_REPO="${MavenRepoTarball}"

              # Data Generation & Ingest Config
              export INGEST_NUM_ELEMENTS="${IngestElementCount}"
              export INGEST_INCLUDE_ENTITIES="${IngestIncludeEntities}"
              export BATCH_SIZE="${IngestBatchSize}"
              export INGEST_MAX_BUFFER_BYTES="${IngestMaxBufferBytes}"
              export INGEST_MAX_TIMEOUT_MILLIS="${IngestMaxTimeout}"
              export INGEST_NUM_THREADS="${IngestThreadCount}"

              # Query Generation Config
              export QUERY_NUM_SEEDS="${QuerySeedCount}"

              function awsSignal {
                # Wait a bit to give developers a chance to SSH in and view error logs
                sleep 300

                # Try to tell AWS EC2 AutoScaling service that this instance is broken and it should provision a new one
                INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                if [ "$INSTANCE_ID" != "" ]; then
                  /usr/bin/aws autoscaling set-instance-health --health-status "Unhealthy" --instance-id "$INSTANCE_ID" --region "${AWS::Region}"
                fi

                # Shutdown the instance. If the above command (which directly tells the AutoScaling service that this instance
                # is broken) fails, then shutting down the instance will cause the status checks to fail which the AutoScaling
                # service will pick up on - it just takes it a little longer (~5mins vs. 30secs)
                /sbin/shutdown now
              }
              trap awsSignal EXIT

              if ! curl -fL -o ./script "https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/performance-tests/ec2-userdata-scripts/run-gaffer-random-generator.sh"; then
                curl -fL -o ./script "https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/performance-tests/ec2-userdata-scripts/run-gaffer-random-generator.sh"
              fi

              chmod +x ./script
              ./script

            - MavenTarballAccessDependency: !If [BootstrapLocalMavenRepo, !Ref GeneratorS3AccessMavenTarballPolicy, ""]

  ###################
  ## Query Generators
  ###################

  QueryGeneratorScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - WaitForSplitPointsToBeSet
      - GeneratorAccessToEmrMasterIngressRule
      - GeneratorAccessToEmrSlaveIngressRule
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetId
      DesiredCapacity: !Ref QueryGeneratorCount
      MinSize: 0
      MaxSize: 1000
      Cooldown: 60
      MetricsCollection:
        - Granularity: 1Minute
      LaunchConfigurationName: !Ref QueryGeneratorLaunchConfiguration
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: "AWS::StackName", "querygen"]]
          PropagateAtLaunch: true

  QueryGeneratorLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref QueryGeneratorInstanceType
      ImageId: !FindInMap [InstanceAmi, Ref: "AWS::Region", 64ebs]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref GeneratorInstanceProfile
      SecurityGroups:
        !Split
          - ","
          - !Join
              - ","
              - - !Join [",", !Ref ExtraSecurityGroups]
                - !Ref GeneratorSecurityGroup
      UserData:
        Fn::Base64:
          !Sub
            - |
              #!/bin/bash -xe

              # Common Config
              export GENERATOR_TYPE="query"
              export GAFFER_TOOLS_VERSION="${GafferToolsVersion}"
              export GAFFER_GRAPH_ID="gaffer_performance_test"

              export EMR_JOB_FLOW_ID="${GafferWithUser.Outputs.EmrClusterId}"
              export ACCUMULO_INSTANCE="${GafferWithUser.Outputs.AccumuloInstanceName}"
              export ACCUMULO_USERNAME="${GafferWithUser.Outputs.UserName}"
              export PASSWORD_PARAM="${GafferWithUser.Outputs.PasswordParameter}"
              export ZOOKEEPERS="${GafferWithUser.Outputs.EmrMasterPublicDNS}"
              export AWS_REGION="${AWS::Region}"

              export RMAT_MAX_NODE_ID="${RmatMaxNodeId}"

              export MVN_REPO="${MavenRepoTarball}"

              # Data Generation & Ingest Config
              export INGEST_NUM_ELEMENTS="${IngestElementCount}"
              export INGEST_INCLUDE_ENTITIES="${IngestIncludeEntities}"
              export INGEST_MAX_BUFFER_BYTES="${IngestMaxBufferBytes}"
              export INGEST_MAX_TIMEOUT_MILLIS="${IngestMaxTimeout}"
              export INGEST_NUM_THREADS="${IngestThreadCount}"

              # Query Generation Config
              export QUERY_NUM_SEEDS="${QuerySeedCount}"
              export BATCH_SIZE="${QueryBatchSize}"

              function awsSignal {
                # Wait a bit to give developers a chance to SSH in and view error logs
                sleep 300

                # Try to tell AWS EC2 AutoScaling service that this instance is broken and it should provision a new one
                INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                if [ "$INSTANCE_ID" != "" ]; then
                  /usr/bin/aws autoscaling set-instance-health --health-status "Unhealthy" --instance-id "$INSTANCE_ID" --region "${AWS::Region}"
                fi

                # Shutdown the instance. If the above command (which directly tells the AutoScaling service that this instance
                # is broken) fails, then shutting down the instance will cause the status checks to fail which the AutoScaling
                # service will pick up on - it just takes it a little longer (~5mins vs. 30secs)
                /sbin/shutdown now
              }
              trap awsSignal EXIT

              if ! curl -fL -o ./script "https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/performance-tests/ec2-userdata-scripts/run-gaffer-random-generator.sh"; then
                curl -fL -o ./script "https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/performance-tests/ec2-userdata-scripts/run-gaffer-random-generator.sh"
              fi

              chmod +x ./script
              ./script

            - MavenTarballAccessDependency: !If [BootstrapLocalMavenRepo, !Ref GeneratorS3AccessMavenTarballPolicy, ""]

  ###############################
  ## Common Generator Permissions
  ###############################

  GeneratorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [Ref: "AWS::StackName", "generator-profile"]]
      Roles:
        - Ref: GeneratorRole

  GeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [Ref: "AWS::StackName", "generator-role"]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "generator-metrics"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - cloudwatch:PutMetricData
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "generator-set-autoscale-health"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - autoscaling:SetInstanceHealth
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "generator-kms-decrypt-access"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub ${GafferWithUser.Outputs.PasswordEncryptionKey}
                Action:
                  - kms:Decrypt
              - Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:ssm:"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":parameter/"
                      - !Sub ${GafferWithUser.Outputs.PasswordParameter}
                Action:
                  - ssm:GetParameters

  GeneratorS3AccessMavenTarballPolicy:
    Condition: BootstrapLocalMavenRepo
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref GeneratorRole
      PolicyName: !Join ["-", [Ref: "AWS::StackName", "mvn-tar-access"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !Join ["", ["arn:aws:s3:::", !Ref MavenRepoTarball]]
            Action:
              - s3:GetObject

  ##################################
  ## CloudWatch Monitoring Dashboard
  ##################################

  MetricDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref "AWS::StackName"
      DashboardBody: '{ "widgets": [{ "width": 24, "height": 2, "type": "text", "properties": { "markdown": "# Please wait for dashboard to initialise..." } }] }'

  UpdateDashboardRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 minute)"
      Targets:
        - Id: TargetLambdaFunction
          Arn: !GetAtt UpdateDashboardLambda.Arn

  PermissionForEventsToInvokeUpdateDashboardLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref UpdateDashboardLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UpdateDashboardRule.Arn

  UpdateDashboardLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - DataGeneratorScalingGroup
      - QueryGeneratorScalingGroup
    Properties:
      Description: Updates the Metric Dashboard so that it contains all the metrics relevant to the performance test
      Role: !GetAtt UpdateDashboardRole.Arn
      Runtime: python3.6
      Handler: script.lambda_handler
      Environment:
        Variables:
          STACK_NAME: !Ref "AWS::StackName"
      MemorySize: 128
      Timeout: !Ref TimeoutMetricsUpdate
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: "lambda/update-cloudwatch-dashboard.zip"

  UpdateDashboardRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "dashboard-update-policy"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:cloudformation:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":stack/"
                      - !Ref "AWS::StackName"
                      - "/*"
                Action: cloudformation:DescribeStacks
              - Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:elasticmapreduce:"
                      - !Ref "AWS::Region"
                      - ":"
                      - !Ref "AWS::AccountId"
                      - ":cluster/"
                      - !Sub ${GafferWithUser.Outputs.EmrClusterId}
                Action: elasticmapreduce:ListInstances
              - Effect: Allow
                Resource: "*"
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - ec2:DescribeInstances
                  - ec2:MonitorInstances
              - Effect: Allow
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:cloudwatch::"
                      - !Ref "AWS::AccountId"
                      - ":dashboard/"
                      - !Ref MetricDashboard
                Action:
                  - cloudwatch:GetDashboard
                  - cloudwatch:PutDashboard

  ##############################
  ## Upload dependencies into S3
  ##############################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  FileUploadCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt FileUploadLambda.Arn
      BucketName: !Ref S3Bucket

  FileUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uploads files required to run Gaffer performance tests into an S3 bucket
      Role: !GetAtt FileUploadRole.Arn
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: !Ref TimeoutUpload
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python

          import boto3
          import base64
          import zipfile
          import urllib2
          import cfnresponse

          s3 = boto3.client('s3')

          files=[]

          files.append({
            'Output': 'DeployGafferWithUserStack',
            'Key': 'cloudformation/gaffer-with-user.yaml',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/core/cloudformation/gaffer-with-user.yaml',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/core/cloudformation/gaffer-with-user.yaml'
            ]
          })

          files.append({
            'Output': 'SetGafferAccumuloSplitPointsScript',
            'Key': 'step/set-gaffer-performance-test-split-points.sh',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/performance-tests/emr-step-scripts/set-gaffer-performance-test-split-points.sh',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/performance-tests/emr-step-scripts/set-gaffer-performance-test-split-points.sh'
            ]
          })

          files.append({
            'Output': 'InstallAccumuloMetricsCollectionScript',
            'Key': 'step/install-accumulo-metric-collection.sh',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/performance-tests/emr-step-scripts/install-accumulo-metric-collection.sh',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/performance-tests/emr-step-scripts/install-accumulo-metric-collection.sh'
            ]
          })

          files.append({
            'Output': 'UpdateMetricsDashboardLambda',
            'ZipFileName': 'script.py',
            'Key': 'lambda/update-cloudwatch-dashboard.zip',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/performance-tests/lambdas/update-cloudwatch-dashboard.py',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/performance-tests/lambdas/update-cloudwatch-dashboard.py'
            ]
          })

          def upload_files(bucket):
            outputs = {}

            for file in files:
              body = None
              if 'Body' in file:
                body = file['Body']
              elif 'Body64' in file:
                body = base64.b64decode(file['Body64'])
              elif 'Url' in file:
                body = urllib2.urlopen(file['Url']).read()
              elif 'Urls' in file:
                lastError = None
                for url in file['Urls']:
                  try:
                    body = urllib2.urlopen(url).read()
                    break
                  except Exception as e:
                    print('Request for ' + url + ' error: ' + str(e))
                    lastError = e
                if body is None and lastError is not None:
                  raise lastError

              if body is not None and 'ZipFileName' in file:
                with zipfile.ZipFile('/tmp/file.zip', 'w') as zipFile:
                  zippedScriptInfo = zipfile.ZipInfo(file['ZipFileName'])
                  zippedScriptInfo.external_attr = 0777 << 16L
                  zipFile.writestr(zippedScriptInfo, body)
                body = open('/tmp/file.zip', 'rb')

              if body is not None:
                s3.put_object(
                  Bucket=bucket,
                  Key=file['Key'],
                  Body=body
                )

                if 'Output' in file:
                  outputs[file['Output']] = file['Key']

            return outputs

          def cleanup_files(bucket):
            for file in files:
              s3.delete_object(
                Bucket=bucket,
                Key=file['Key']
              )

          def lambda_handler(evt, cntx):
            try:
              print(evt)

              bucket = evt['ResourceProperties']['BucketName']
              print('S3 Bucket: ' + bucket)

              requestType = evt['RequestType']
              if requestType == 'Create' or requestType == 'Update':
                outputs = upload_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, outputs)
              elif requestType == 'Delete':
                cleanup_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, {})
              else:
                raise Exception('Unrecognised RequestType: ' + requestType)

            except Exception as e:
              cfnresponse.send(evt, cntx, cfnresponse.FAILED, { 'Error': str(e) })
              raise

  FileUploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "file-upload-policy"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

Outputs:
  GafferTemplateType:
    Value: "gaffer-performance-tests"
  EmrMasterPublicDNS:
    Value: !Sub ${GafferWithUser.Outputs.EmrMasterPublicDNS}
  EmrClusterId:
    Value: !Sub ${GafferWithUser.Outputs.EmrClusterId}
  EmrMasterSecurityGroup:
    Value: !Sub ${GafferWithUser.Outputs.EmrMasterSecurityGroup}
  EmrSlaveSecurityGroup:
    Value: !Sub ${GafferWithUser.Outputs.EmrSlaveSecurityGroup}
  EmrIamRoleName:
    Value: !Sub ${GafferWithUser.Outputs.EmrIamRoleName}
  GafferInstanceName:
    Value: !Sub ${GafferWithUser.Outputs.GafferInstanceName}
  AccumuloInstanceName:
    Value: !Sub ${GafferWithUser.Outputs.AccumuloInstanceName}
  UserName:
    Value: !Sub ${GafferWithUser.Outputs.UserName}
  PasswordParameter:
    Value: !Sub ${GafferWithUser.Outputs.PasswordParameter}
  PasswordEncryptionKey:
    Value: !Sub ${GafferWithUser.Outputs.PasswordEncryptionKey}
  DataGeneratorAutoScalingGroupName:
    Value: !Ref DataGeneratorScalingGroup
  QueryGeneratorAutoScalingGroupName:
    Value: !Ref QueryGeneratorScalingGroup
  MetricDashboard:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref "AWS::Region"
          - ".console.aws.amazon.com/cloudwatch/home#dashboards:name="
          - !Ref MetricDashboard
