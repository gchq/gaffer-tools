AWSTemplateFormatVersion: "2010-09-09"
Description: "Runs the Gaffer Road Traffic System Tests"

Parameters:

  GafferVersion:
    Type: String
    Default: develop
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer to deploy - can be a version number (e.g. 1.0.0) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  GafferToolsVersion:
    Type: String
    Default: develop
    MinLength: 1
    AllowedPattern: "\\S+"
    Description: The version of Gaffer Tools to use to deploy Gaffer on EMR - can be a version number (e.g. 1.0.0) or a git branch (e.g. gh-X-feature-name) / commit hash etc

  AccumuloVersion:
    Type: String
    Default: 1.9.3
    MinLength: 1
    AllowedPattern: "\\S+"

  EmrRelease:
    Type: String
    Default: emr-5.11.0
    AllowedPattern: "emr-\\d+\\.\\d+\\.\\d+"
    ConstraintDescription: Please select a valid EMR release

  EmrInstanceType:
    Type: String
    Default: m3.xlarge
    MinLength: 1
    Description: Specify the type of instances to deploy in the EMR cluster

  EmrCoreInstanceCount:
    Type: Number
    Default: 3
    MinValue: 0
    Description: The number of (core) instances to deploy as part of the EMR cluster

  ClusterUsage:
    Type: Number
    Default: 85
    MinValue: 1
    MaxValue: 100
    Description: The proportion of the available cluster resources that should be assigned to Accumulo, specified as a percentage. If you plan to deploy other workloads (e.g. MR, Spark) on the EMR cluster then you should alter this parameter so that there will be resources available to them.
    ConstraintDescription: Must be between 1% and 100%

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to deploy infrastructure into

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to deploy infrastructure into. Make sure the subnet resides in the VPC you have selected above!

  ExtraSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Additional security groups that instances should be a member of

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair that you would like to be able to use to SSH into any instances
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  WebInstanceType:
    Type: String
    Default: t2.small
    MinLength: 1
    Description: Specify the type of instance to be used to deploy the Gaffer REST API and Web UI

  TestReportSnsTopic:
    Type: String
    Default: ""
    Description: The ARN of a SNS Topic that a notification should be sent to with the results of the system tests

  MavenRepoTarball:
    Type: String
    Default: ""
    Description: "(Optional) The path to a tarball, stored in S3, that should be used to bootstrap local Maven caches. Should be specified as: <bucketName>/<filename>.tar.gz"
    AllowedPattern: "|(\\S+\\.tar\\.gz)"
    ConstraintDescription: "Please specify this as <bucketName>/<filename>.tar.gz"

  TimeoutUploadFile:
    Type: Number
    Default: 180
    Description: "Timeout value for the upload file(s) function"
    MinValue: 1

  TimeoutDeployServer:
    Type: Number
    Default: 900
    Description: "Timeout for deploying and securing a server"
    MinValue: 1

  TimeoutCreateUsers:
    Type: Number
    Default: 600
    Description: "Timeout value for creating the Gaffer user(s)"
    MinValue: 1

  TimeoutDeployGaffer:
    Type: Number
    Default: 3600
    Description: "Timeout value for deploying Gafffer"
    MinValue: 1

  TimeoutCleanupSecurity:
    Type: Number
    Default: 180
    Description: "Timeout value for the security clean-up"
    MinValue: 1

  TimeoutBuildSchema:
    Type: Number
    Default: 3600
    Description: "Timeout value for a schema build"
    MinValue: 1

  TimeoutIngestData:
    Type: Number
    Default: 3600
    Description: "Timeout value for data ingest"
    MinValue: 1

  TimeoutTestSystem:
    Type: Number
    Default: 3600
    Description: "Timeout value for performing the system tests"
    MinValue: 1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Versions
        Parameters:
          - GafferVersion
          - GafferToolsVersion
          - AccumuloVersion
          - EmrRelease
      - Label:
          default: Infrastructure Config
        Parameters:
          - EmrInstanceType
          - EmrCoreInstanceCount
          - WebInstanceType
          - VpcId
          - SubnetId
          - KeyName
          - ExtraSecurityGroups
          - MavenRepoTarball
          - ClusterUsage
      - Label:
          default: Test Config
        Parameters:
          - TestReportSnsTopic
        Parameters:
          - TimeoutUploadFile
          - TimeoutCleanupSecurity
          - TimeoutDeployGaffer
          - TimeoutCreateUsers
          - TimeoutDeployServer
          - TimeoutBuildSchema
          - TimeoutIngestData
          - TimeoutTestSystem

Conditions:

  TestReportEnabled: !Not [!Equals [!Ref TestReportSnsTopic, ""]]

Resources:

  GafferRoadTraffic:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join ["", ["https://s3.amazonaws.com/", Ref: S3Bucket, "/", !GetAtt FileUploadCustomResource.DeployGafferRoadTrafficStack]]
      Parameters:
        GafferVersion: !Ref GafferVersion
        GafferToolsVersion: !Ref GafferToolsVersion
        AccumuloVersion: !Ref AccumuloVersion
        EmrRelease: !Ref EmrRelease
        EmrInstanceType: !Ref EmrInstanceType
        EmrCoreInstanceCount: !Ref EmrCoreInstanceCount
        VpcId: !Ref VpcId
        SubnetId: !Ref SubnetId
        ExtraSecurityGroups: !Join [",", Ref: ExtraSecurityGroups]
        KeyName: !Ref KeyName
        WebInstanceType: !Ref WebInstanceType
        RoadTrafficDataUrl: "https://raw.githubusercontent.com/gchq/Gaffer/master/example/road-traffic/road-traffic-demo/src/main/resources/roadTrafficSampleData.csv"
        MavenRepoTarball: !Ref MavenRepoTarball
        ClusterUsage: !Ref ClusterUsage
        TimeoutUploadFile: !Ref TimeoutUploadFile
        TimeoutCleanupSecurity: !Ref TimeoutCleanupSecurity
        TimeoutDeployGaffer: !Ref TimeoutDeployGaffer
        TimeoutCreateUsers: !Ref TimeoutCreateUsers
        TimeoutDeployServer: !Ref TimeoutDeployServer
        TimeoutBuildSchema: !Ref TimeoutBuildSchema
        TimeoutIngestData: !Ref TimeoutIngestData

  EmrSnsPolicy:
    Condition: TestReportEnabled
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !GetAtt GafferRoadTraffic.Outputs.EmrIamRoleName
      PolicyName: !Join ["-", [Ref: "AWS::StackName", "emr-sns-access"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: !Ref TestReportSnsTopic
            Action:
              - sns:Publish

  AllowEmrToAccessWebServerIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Sub ${GafferRoadTraffic.Outputs.WebServerSecurityGroup}
      SourceSecurityGroupId: !Sub ${GafferRoadTraffic.Outputs.EmrMasterSecurityGroup}
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  ###################################################
  ## EMR step script to run Road Traffic System Tests
  ###################################################

  WaitForSystemTestsCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitForSystemTestsHandler
      Timeout: !Ref TimeoutTestSystem

  WaitForSystemTestsHandler:
    Type: AWS::CloudFormation::WaitConditionHandle
    DependsOn:
      - GafferRoadTraffic
      - AllowEmrToAccessWebServerIngressRule

  RunSystemTests:
    Type: AWS::EMR::Step
    Properties:
      JobFlowId: !Sub ${GafferRoadTraffic.Outputs.EmrClusterId}
      Name: run-road-traffic-system-tests
      HadoopJarStep:
        Jar: s3://elasticmapreduce/libs/script-runner/script-runner.jar
        Args:
          - !Join ["", ["s3://", !Ref S3Bucket, "/", !GetAtt FileUploadCustomResource.RunGafferSystemTestsScript]]
          - !Ref GafferVersion
          - "-h"
          - !Sub ${GafferRoadTraffic.Outputs.WebServerPublicDNS}
          - "-p"
          - 80
          - "-s"
          - !If [TestReportEnabled, !Ref TestReportSnsTopic, "none"]
          - "--stack-id"
          - !Ref "AWS::StackName"
          - "-w"
          - !Ref WaitForSystemTestsHandler
          # This is here to ensure that the IAM Policy that gives this script permission to publish to SNS has been
          # applied. Unfortunately CloudFormation does not appear to allow DependsOn to be combined with Conditions.
          - "--ignore"
          - !If [TestReportEnabled, !Ref EmrSnsPolicy, "none"]
      ActionOnFailure: CANCEL_AND_WAIT

  ##############################
  ## Upload dependencies into S3
  ##############################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  FileUploadCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt FileUploadLambda.Arn
      BucketName: !Ref S3Bucket

  FileUploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uploads files required to run the Gaffer Road Traffic System Tests to an S3 bucket
      Role: !GetAtt FileUploadRole.Arn
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: !Ref TimeoutUploadFile
      Code:
        ZipFile: !Sub |
          #!/usr/bin/env python

          import boto3
          import base64
          import urllib2
          import cfnresponse

          s3 = boto3.client('s3')

          files=[]

          files.append({
            'Output': 'DeployGafferRoadTrafficStack',
            'Key': 'cloudformation/gaffer-road-traffic.yaml',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/apps/road-traffic/cloudformation/gaffer-road-traffic.yaml',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/apps/road-traffic/cloudformation/gaffer-road-traffic.yaml'
            ]
          })

          files.append({
            'Output': 'RunGafferSystemTestsScript',
            'Key': 'step/run-gaffer-system-tests.sh',
            'Urls': [
              'https://raw.githubusercontent.com/gchq/gaffer-tools/gaffer-tools-${GafferToolsVersion}/deployment/aws/tests/system-tests/emr-step-scripts/run-gaffer-system-tests.sh',
              'https://raw.githubusercontent.com/gchq/gaffer-tools/${GafferToolsVersion}/deployment/aws/tests/system-tests/emr-step-scripts/run-gaffer-system-tests.sh'
            ]
          })

          def upload_files(bucket):
            outputs = {}

            for file in files:
              body = None
              if 'Body' in file:
                body = file['Body']
              elif 'Body64' in file:
                body = base64.b64decode(file['Body64'])
              elif 'Url' in file:
                body = urllib2.urlopen(file['Url']).read()
              elif 'Urls' in file:
                lastError = None
                for url in file['Urls']:
                  try:
                    body = urllib2.urlopen(url).read()
                    break
                  except Exception as e:
                    print('Request for ' + url + ' error: ' + str(e))
                    lastError = e
                if body is None and lastError is not None:
                  raise lastError

              if body is not None:
                s3.put_object(
                  Bucket=bucket,
                  Key=file['Key'],
                  Body=body
                )

                if 'Output' in file:
                  outputs[file['Output']] = file['Key']

            return outputs

          def cleanup_files(bucket):
            for file in files:
              s3.delete_object(
                Bucket=bucket,
                Key=file['Key']
              )

          def lambda_handler(evt, cntx):
            try:
              print(evt)

              bucket = evt['ResourceProperties']['BucketName']
              print('S3 Bucket: ' + bucket)

              requestType = evt['RequestType']
              if requestType == 'Create' or requestType == 'Update':
                outputs = upload_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, outputs)
              elif requestType == 'Delete':
                cleanup_files(bucket)
                cfnresponse.send(evt, cntx, cfnresponse.SUCCESS, {})
              else:
                raise Exception('Unrecognised RequestType: ' + requestType)

            except Exception as e:
              cfnresponse.send(evt, cntx, cfnresponse.FAILED, { 'Error': str(e) })
              raise

  FileUploadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [Ref: "AWS::StackName", "file-upload-policy"]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject

Outputs:
  EmrMasterPublicDNS:
    Value: !Sub ${GafferRoadTraffic.Outputs.EmrMasterPublicDNS}
  EmrClusterId:
    Value: !Sub ${GafferRoadTraffic.Outputs.EmrClusterId}
  EmrMasterSecurityGroup:
    Value: !Sub ${GafferRoadTraffic.Outputs.EmrMasterSecurityGroup}
  EmrSlaveSecurityGroup:
    Value: !Sub ${GafferRoadTraffic.Outputs.EmrSlaveSecurityGroup}
  EmrIamRoleName:
    Value: !Sub ${GafferRoadTraffic.Outputs.EmrIamRoleName}
  GafferInstanceName:
    Value: !Sub ${GafferRoadTraffic.Outputs.GafferInstanceName}
  AccumuloInstanceName:
    Value: !Sub ${GafferRoadTraffic.Outputs.AccumuloInstanceName}
  GraphId:
    Value: !Sub ${GafferRoadTraffic.Outputs.GraphId}
  UserName:
    Value: !Sub ${GafferRoadTraffic.Outputs.UserName}
  PasswordParameter:
    Value: !Sub ${GafferRoadTraffic.Outputs.PasswordParameter}
  PasswordEncryptionKey:
    Value: !Sub ${GafferRoadTraffic.Outputs.PasswordEncryptionKey}
  WebServerPublicDNS:
    Value: !Sub ${GafferRoadTraffic.Outputs.WebServerPublicDNS}
  WebServerSecurityGroup:
    Value: !Sub ${GafferRoadTraffic.Outputs.WebServerSecurityGroup}
  RestApi:
    Value: !Sub ${GafferRoadTraffic.Outputs.RestApi}
  WebUi:
    Value: !Sub ${GafferRoadTraffic.Outputs.WebUi}
